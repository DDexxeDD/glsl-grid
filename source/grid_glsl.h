#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input source/grid.glsl --output source/grid_glsl.h --slang glsl330

    Overview:

        Shader program 'cube':
            Get shader desc: cube_shader_desc(sg_query_backend());
            Vertex shader: vs_cube
                Attribute slots:
                    ATTR_vs_cube_position = 0
                    ATTR_vs_cube_normal_in = 1
                Uniform block 'vs_cube_params':
                    C struct: vs_cube_params_t
                    Bind slot: SLOT_vs_cube_params = 0
            Fragment shader: fs_cube
                Uniform block 'fs_cube_params':
                    C struct: fs_cube_params_t
                    Bind slot: SLOT_fs_cube_params = 0

        Shader program 'grid':
            Get shader desc: grid_shader_desc(sg_query_backend());
            Vertex shader: vs_grid
                Attribute slots:
                    ATTR_vs_grid_position = 0
                Uniform block 'vs_grid_params':
                    C struct: vs_grid_params_t
                    Bind slot: SLOT_vs_grid_params = 0
            Fragment shader: fs_grid


    Shader descriptor structs:

        sg_shader cube = sg_make_shader(cube_shader_desc(sg_query_backend()));
        sg_shader grid = sg_make_shader(grid_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_cube':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_cube_position] = { ... },
                    [ATTR_vs_cube_normal_in] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'vs_grid':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_grid_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'vs_cube_params':

        vs_cube_params_t vs_cube_params = {
            .model = ...;
            .view = ...;
            .projection = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_cube_params, &SG_RANGE(vs_cube_params));

    Bind slot and C-struct for uniform block 'fs_cube_params':

        fs_cube_params_t fs_cube_params = {
            .object_color = ...;
            .light_color = ...;
            .light_position = ...;
            .view_position = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_cube_params, &SG_RANGE(fs_cube_params));

    Bind slot and C-struct for uniform block 'vs_grid_params':

        vs_grid_params_t vs_grid_params = {
            .view = ...;
            .projection = ...;
            .model = ...;
            .camera_position = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_grid_params, &SG_RANGE(vs_grid_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_cube_position (0)
#define ATTR_vs_cube_normal_in (1)
#define ATTR_vs_grid_position (0)
#define SLOT_vs_cube_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_cube_params_t {
    mat4 model;
    mat4 view;
    mat4 projection;
} vs_cube_params_t;
#pragma pack(pop)
#define SLOT_fs_cube_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_cube_params_t {
    vec3 object_color;
    uint8_t _pad_12[4];
    vec3 light_color;
    uint8_t _pad_28[4];
    vec3 light_position;
    uint8_t _pad_44[4];
    vec3 view_position;
    uint8_t _pad_60[4];
} fs_cube_params_t;
#pragma pack(pop)
#define SLOT_vs_grid_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_grid_params_t {
    mat4 view;
    mat4 projection;
    mat4 model;
    vec3 camera_position;
    uint8_t _pad_204[4];
} vs_grid_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_cube_params[12];
    layout(location = 0) in vec3 position;
    out vec3 frag_position;
    out vec3 normal;
    layout(location = 1) in vec3 normal_in;
    
    void main()
    {
        mat4 _31 = mat4(vs_cube_params[0], vs_cube_params[1], vs_cube_params[2], vs_cube_params[3]);
        vec4 _41 = vec4(position, 1.0);
        gl_Position = ((mat4(vs_cube_params[8], vs_cube_params[9], vs_cube_params[10], vs_cube_params[11]) * mat4(vs_cube_params[4], vs_cube_params[5], vs_cube_params[6], vs_cube_params[7])) * _31) * _41;
        frag_position = vec3((_31 * _41).xyz);
        mat4 _63 = transpose(inverse(_31));
        normal = mat3(_63[0].xyz, _63[1].xyz, _63[2].xyz) * normal_in;
    }
    
*/
static const char vs_cube_source_glsl330[670] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x63,0x75,
    0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x5f,0x69,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,
    0x33,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x63,0x75,0x62,
    0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x34,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x6d,
    0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x63,0x75,0x62,
    0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,
    0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x63,0x75,0x62,0x65,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x63,
    0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,0x5f,0x33,0x31,0x29,0x20,0x2a,0x20,0x5f,
    0x34,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,0x33,
    0x31,0x20,0x2a,0x20,0x5f,0x34,0x31,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x36,0x33,0x20,0x3d,0x20,0x74,0x72,
    0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,
    0x5f,0x33,0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x3d,0x20,0x6d,0x61,0x74,0x33,0x28,0x5f,0x36,0x33,0x5b,0x30,0x5d,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x5f,0x36,0x33,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,
    0x20,0x5f,0x36,0x33,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x69,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_cube_params[4];
    in vec3 normal;
    in vec3 frag_position;
    layout(location = 0) out vec4 frag_color;
    
    void main()
    {
        vec3 _29 = normalize(normal);
        vec3 _37 = normalize(fs_cube_params[2].xyz - frag_position);
        frag_color = vec4((((fs_cube_params[1].xyz * 0.100000001490116119384765625) + (fs_cube_params[1].xyz * max(dot(_29, _37), 0.0))) + (fs_cube_params[1].xyz * (0.5 * pow(max(dot(normalize(fs_cube_params[3].xyz - frag_position), reflect(-_37, _29)), 0.0), 32.0)))) * fs_cube_params[0].xyz, 1.0);
    }
    
*/
static const char fs_cube_source_glsl330[541] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x63,0x75,
    0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x66,0x73,0x5f,0x63,0x75,0x62,0x65,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2d,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x28,0x66,0x73,0x5f,0x63,0x75,0x62,
    0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,
    0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,
    0x20,0x2b,0x20,0x28,0x66,0x73,0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,
    0x64,0x6f,0x74,0x28,0x5f,0x32,0x39,0x2c,0x20,0x5f,0x33,0x37,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x66,0x73,0x5f,0x63,0x75,0x62,0x65,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,
    0x20,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,
    0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x66,0x73,
    0x5f,0x63,0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x2e,
    0x78,0x79,0x7a,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x29,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,
    0x33,0x37,0x2c,0x20,0x5f,0x32,0x39,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,
    0x20,0x33,0x32,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,
    0x75,0x62,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 vs_grid_params[13];
    out vec3 near_point;
    layout(location = 0) in vec3 position;
    out vec3 far_point;
    out mat4 frag_view;
    out mat4 frag_projection;
    
    vec3 unproject_point(float x, float y, float z, mat4 view, mat4 projection)
    {
        vec4 _38 = (inverse(view) * inverse(projection)) * vec4(x, y, z, 1.0);
        return _38.xyz / vec3(_38.w);
    }
    
    void main()
    {
        float param = position.x;
        float param_1 = position.y;
        float param_2 = 0.0;
        mat4 _73 = mat4(vs_grid_params[0], vs_grid_params[1], vs_grid_params[2], vs_grid_params[3]);
        mat4 param_3 = _73;
        mat4 _76 = mat4(vs_grid_params[4], vs_grid_params[5], vs_grid_params[6], vs_grid_params[7]);
        mat4 param_4 = _76;
        near_point = unproject_point(param, param_1, param_2, param_3, param_4);
        float param_5 = position.x;
        float param_6 = position.y;
        float param_7 = 1.0;
        mat4 param_8 = _73;
        mat4 param_9 = _76;
        far_point = unproject_point(param_5, param_6, param_7, param_8, param_9);
        frag_view = _73;
        frag_projection = _76;
        gl_Position = vec4(position, 1.0);
    }
    
*/
static const char vs_grid_source_glsl330[1090] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x67,0x72,
    0x69,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,
    0x6e,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x33,0x20,0x66,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x76,0x69,0x65,
    0x77,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x6d,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x65,
    0x63,0x33,0x20,0x75,0x6e,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x5f,0x70,0x6f,0x69,
    0x6e,0x74,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x79,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x7a,0x2c,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x2c,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x72,
    0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x38,0x20,0x3d,0x20,0x28,0x69,0x6e,0x76,0x65,
    0x72,0x73,0x65,0x28,0x76,0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x69,0x6e,0x76,0x65,
    0x72,0x73,0x65,0x28,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x29,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x78,0x2c,0x20,0x79,0x2c,0x20,0x7a,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x5f,0x33,0x38,0x2e,0x78,0x79,0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x33,
    0x28,0x5f,0x33,0x38,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x37,0x33,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x67,0x72,0x69,0x64,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x67,0x72,
    0x69,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x20,0x3d,0x20,0x5f,0x37,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x5f,0x37,0x36,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,
    0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x67,0x72,0x69,0x64,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x37,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,
    0x74,0x20,0x3d,0x20,0x75,0x6e,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x5f,0x70,0x6f,
    0x69,0x6e,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x36,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x37,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,
    0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x5f,0x37,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x39,0x20,0x3d,0x20,0x5f,0x37,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x61,0x72,
    0x5f,0x70,0x6f,0x69,0x6e,0x74,0x20,0x3d,0x20,0x75,0x6e,0x70,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x76,0x69,0x65,0x77,0x20,0x3d,0x20,0x5f,0x37,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x5f,0x37,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 330
    
    in mat4 frag_projection;
    in mat4 frag_view;
    in vec3 near_point;
    in vec3 far_point;
    layout(location = 0) out vec4 frag_color;
    
    float compute_depth(vec3 position)
    {
        vec4 _120 = (frag_projection * frag_view) * vec4(position, 1.0);
        return 0.5 + (0.5 * (_120.z / _120.w));
    }
    
    float compute_linear_depth(vec3 position)
    {
        vec4 _143 = (frag_projection * frag_view) * vec4(position, 1.0);
        return 1.0 / (100.5 - ((((_143.z / _143.w) * 2.0) - 1.0) * 99.5));
    }
    
    vec4 grid(vec3 frag_position_3d, float scale)
    {
        bool _31 = frag_position_3d.x > 10.0;
        bool _39;
        if (!_31)
        {
            _39 = frag_position_3d.x < (-10.0);
        }
        else
        {
            _39 = _31;
        }
        bool _47;
        if (!_39)
        {
            _47 = frag_position_3d.z > 10.0;
        }
        else
        {
            _47 = _39;
        }
        bool _54;
        if (!_47)
        {
            _54 = frag_position_3d.z < (-10.0);
        }
        else
        {
            _54 = _47;
        }
        if (_54)
        {
            return vec4(0.0);
        }
        vec2 _66 = frag_position_3d.xz * scale;
        vec2 _80 = abs(fract(_66 - vec2(0.5)) - vec2(0.5)) / fwidth(_66);
        return vec4(0.20000000298023223876953125, 0.20000000298023223876953125, 0.20000000298023223876953125, 1.0 - min(min(_80.x, _80.y), 1.0));
    }
    
    void main()
    {
        float _188 = (-near_point.y) / (far_point.y - near_point.y);
        vec3 _196 = near_point + ((far_point - near_point) * _188);
        vec3 param = _196;
        gl_FragDepth = compute_depth(param);
        vec3 param_1 = _196;
        vec3 param_2 = _196;
        float param_3 = 1.0;
        vec3 param_4 = _196;
        float param_5 = 1.0;
        frag_color = (grid(param_2, param_3) + grid(param_4, param_5)) * float(_188 > 0.0);
        frag_color.w *= max(0.0, 0.5 - compute_linear_depth(param_1));
    }
    
*/
static const char fs_grid_source_glsl330[1740] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x69,0x6e,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x69,0x6e,0x20,0x6d,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x76,0x69,0x65,0x77,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x5f,0x64,0x65,0x70,0x74,0x68,0x28,
    0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x32,0x30,0x20,0x3d,
    0x20,0x28,0x66,0x72,0x61,0x67,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,
    0x6e,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x76,0x69,0x65,0x77,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x30,0x2e,0x35,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x28,0x5f,
    0x31,0x32,0x30,0x2e,0x7a,0x20,0x2f,0x20,0x5f,0x31,0x32,0x30,0x2e,0x77,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x6d,0x70,0x75,
    0x74,0x65,0x5f,0x6c,0x69,0x6e,0x65,0x61,0x72,0x5f,0x64,0x65,0x70,0x74,0x68,0x28,
    0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x34,0x33,0x20,0x3d,
    0x20,0x28,0x66,0x72,0x61,0x67,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,
    0x6e,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x76,0x69,0x65,0x77,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x31,0x30,0x30,0x2e,0x35,0x20,0x2d,0x20,
    0x28,0x28,0x28,0x28,0x5f,0x31,0x34,0x33,0x2e,0x7a,0x20,0x2f,0x20,0x5f,0x31,0x34,
    0x33,0x2e,0x77,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x31,0x2e,
    0x30,0x29,0x20,0x2a,0x20,0x39,0x39,0x2e,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x65,0x63,0x34,0x20,0x67,0x72,0x69,0x64,0x28,0x76,0x65,0x63,0x33,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x61,0x6c,0x65,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x31,0x20,0x3d,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2e,
    0x78,0x20,0x3e,0x20,0x31,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,
    0x6f,0x6c,0x20,0x5f,0x33,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x21,0x5f,0x33,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2e,0x78,0x20,0x3c,0x20,0x28,
    0x2d,0x31,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x5f,0x33,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,
    0x34,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x21,0x5f,0x33,0x39,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x34,0x37,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2e,0x7a,0x20,0x3e,0x20,0x31,0x30,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x34,
    0x37,0x20,0x3d,0x20,0x5f,0x33,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x35,0x34,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x21,0x5f,0x34,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2e,
    0x7a,0x20,0x3c,0x20,0x28,0x2d,0x31,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,
    0x5f,0x34,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x35,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x33,0x64,0x2e,0x78,0x7a,
    0x20,0x2a,0x20,0x73,0x63,0x61,0x6c,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x5f,0x38,0x30,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x66,0x72,0x61,
    0x63,0x74,0x28,0x5f,0x36,0x36,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
    0x35,0x29,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x29,
    0x20,0x2f,0x20,0x66,0x77,0x69,0x64,0x74,0x68,0x28,0x5f,0x36,0x36,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,
    0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,
    0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,
    0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x32,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,
    0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x6d,0x69,0x6e,0x28,0x6d,0x69,0x6e,0x28,0x5f,0x38,0x30,0x2e,0x78,0x2c,0x20,0x5f,
    0x38,0x30,0x2e,0x79,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x38,0x38,0x20,0x3d,0x20,
    0x28,0x2d,0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x2e,0x79,0x29,0x20,
    0x2f,0x20,0x28,0x66,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x2e,0x79,0x20,0x2d,
    0x20,0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x2e,0x79,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x39,0x36,0x20,0x3d,0x20,
    0x6e,0x65,0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x20,0x2b,0x20,0x28,0x28,0x66,
    0x61,0x72,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x20,0x2d,0x20,0x6e,0x65,0x61,0x72,0x5f,
    0x70,0x6f,0x69,0x6e,0x74,0x29,0x20,0x2a,0x20,0x5f,0x31,0x38,0x38,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x5f,0x31,0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,
    0x61,0x67,0x44,0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,
    0x65,0x5f,0x64,0x65,0x70,0x74,0x68,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x31,
    0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x67,
    0x72,0x69,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x67,0x72,0x69,0x64,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x29,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x31,0x38,0x38,0x20,0x3e,0x20,0x30,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x35,0x20,0x2d,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x5f,
    0x6c,0x69,0x6e,0x65,0x61,0x72,0x5f,0x64,0x65,0x70,0x74,0x68,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before grid_glsl.h"
#endif
static inline const sg_shader_desc* cube_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal_in";
      desc.vs.source = vs_cube_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_cube_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = fs_cube_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 64;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_cube_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.label = "cube_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* grid_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = vs_grid_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 208;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_grid_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 13;
      desc.fs.source = fs_grid_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "grid_shader";
    }
    return &desc;
  }
  return 0;
}
